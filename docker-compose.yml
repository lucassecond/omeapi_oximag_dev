version: '3.8'

services:
  python-job:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    volumes:
      - json-volume:/data  # ✅ Volume correto
    environment:
      - PYTHON_ENV=production
    restart: unless-stopped
    depends_on:
      - mongodb
      - postgres
    networks:
      omie_net:
        ipv4_address: 172.28.0.2

  mongo-importer:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    volumes:
      - json-volume:/data  # ✅ Volume compartilhado com MongoDB
    command: ["python", "/app/import_mongo.py"]  # ✅ Executa o script de importação automaticamente
    restart: on-failure
    depends_on:
      - mongodb
    networks:
      omie_net:
        ipv4_address: 172.28.0.6

  etl-job:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    volumes:
      - json-volume:/data  # ✅ Agora o ETL também pode acessar os JSONs
    command: ["python", "/app/etl.py"]
    restart: unless-stopped
    depends_on:
      - mongo-importer  # ✅ Agora ele só roda depois que os JSONs forem importados
      - postgres
    networks:
      omie_net:
        ipv4_address: 172.28.0.5

  mongodb:
    image: mongo:latest
    container_name: mongodb
    volumes:
      - json-volume:/data  # ✅ Agora o MongoDB pode acessar os JSONs
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    restart: unless-stopped
    networks:
      omie_net:
        ipv4_address: 172.28.0.3

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=omieapi
      - POSTGRES_PASSWORD=admin123%
      - POSTGRES_DB=db_omieoximag
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      omie_net:
        ipv4_address: 172.28.0.4

volumes:
  json-volume:  # ✅ Volume compartilhado entre os serviços
  mongo-data:
  pgdata:

networks:
  omie_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
